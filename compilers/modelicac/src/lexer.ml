# 23 "src/lexer.mll"
 
open Parser

exception Eof

let check_reserved = function
    | "algorithm" -> ALGORITHM
    | "and" -> AND
    | "annotation" -> ANNOTATION
    | "assert" -> ASSERT
    | "block" -> BLOCK
    | "class" -> CLASS
    | "connect" -> CONNECT
    | "connector" -> CONNECTOR
    | "constant" -> CONSTANT
    | "discrete" -> DISCRETE
    | "else" -> ELSE
    | "elseif" -> ELSEIF
    | "elsewhen" -> ELSEWHEN
    | "encapsulated" -> ENCAPSULATED
    | "end" -> END
    | "equation" -> EQUATION
    | "extends" -> EXTENDS
    | "external" -> EXTERNAL
    | "false" -> FALSE
    | "final" -> FINAL
    | "flow" -> FLOW
    | "for" -> FOR
    | "function" -> FUNCTION
    | "if" -> IF
    | "import" -> IMPORT
    | "in" -> IN
    | "inner" -> INNER
    | "input" -> INPUT
    | "loop" -> LOOP
    | "model" -> MODEL
    | "not" -> NOT
    | "or" -> OR
    | "outer" -> OUTER
    | "output" -> OUTPUT
    | "package" -> PACKAGE
    | "parameter" -> PARAMETER
    | "partial" -> PARTIAL
    | "protected" -> PROTECTED
    | "public" -> PUBLIC
    | "record" -> RECORD
    | "redeclare" -> REDECLARE
    | "replaceable" -> REPLACEABLE
    | "terminate" -> TERMINATE
    | "then" -> THEN
    | "true" -> TRUE
    | "type" -> TYPE
    | "when" -> WHEN
    | "while" -> WHILE
    | "within" -> WITHIN
    | s -> IDENT s


# 61 "src/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\223\255\002\000\065\000\003\000\232\255\234\255\235\255\
    \236\255\031\000\238\255\239\255\240\255\241\255\242\255\243\255\
    \244\255\245\255\246\255\090\000\086\000\162\000\239\000\086\000\
    \254\255\255\255\002\000\087\000\102\000\253\255\252\255\005\001\
    \016\001\026\001\043\001\055\001\248\255\247\255\144\001\230\255\
    \225\255\224\255\227\255\226\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\027\000\026\000\024\000\255\255\255\255\255\255\
    \255\255\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\006\000\004\000\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\019\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\026\000\027\000\027\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\024\000\000\000\030\000\025\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\017\000\006\000\008\000\011\000\007\000\012\000\023\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\009\000\010\000\003\000\004\000\002\000\043\000\
    \040\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\016\000\039\000\015\000\005\000\021\000\
    \020\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\014\000\037\000\013\000\042\000\041\000\
    \027\000\028\000\000\000\000\000\035\000\026\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \028\000\000\000\000\000\000\000\000\000\029\000\000\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\000\000\035\000\000\000\035\000\038\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\000\000\000\000\000\000\
    \001\000\021\000\255\255\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\032\000\000\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\000\000\034\000\000\000\031\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\031\000\031\000\000\000\255\255\
    \000\000\000\000\255\255\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\035\000\255\255\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\000\000\035\000\000\000\035\000\036\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\019\000\000\000\000\000\000\000\000\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
    \000\000\019\000\019\000\000\000\000\000\000\000\019\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \000\000\000\000\019\000\000\000\019\000\000\000\019\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\026\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\003\000\003\000\
    \023\000\027\000\255\255\255\255\020\000\023\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \028\000\255\255\255\255\255\255\255\255\028\000\255\255\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\255\255\020\000\255\255\020\000\019\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\255\255\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\255\255\255\255\255\255\
    \000\000\021\000\026\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\022\000\255\255\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \031\000\255\255\031\000\255\255\022\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\255\255\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\022\000\032\000\255\255\027\000\
    \255\255\255\255\019\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\035\000\028\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\255\255\255\255\255\255\255\255\032\000\255\255\255\255\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\255\255\035\000\255\255\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\038\000\255\255\255\255\255\255\255\255\038\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\038\000\255\255\255\255\255\255\
    \255\255\038\000\038\000\255\255\255\255\255\255\038\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\038\000\255\255\
    \255\255\255\255\038\000\255\255\038\000\255\255\038\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 99 "src/lexer.mll"
                ( token lexbuf )
# 273 "src/lexer.ml"

  | 1 ->
# 102 "src/lexer.mll"
                ( token lexbuf )
# 278 "src/lexer.ml"

  | 2 ->
# 106 "src/lexer.mll"
                ( let _ = Lexing.lexeme lexbuf in
                  token lexbuf )
# 284 "src/lexer.ml"

  | 3 ->
# 110 "src/lexer.mll"
                ( let _ = Lexing.lexeme lexbuf in
                  token lexbuf )
# 290 "src/lexer.ml"

  | 4 ->
# 114 "src/lexer.mll"
                ( let lxm = Lexing.lexeme lexbuf in
                    UNSIGNED_INTEGER lxm )
# 296 "src/lexer.ml"

  | 5 ->
# 118 "src/lexer.mll"
                ( let lxm = Lexing.lexeme lexbuf in
                    UNSIGNED_NUMBER lxm )
# 302 "src/lexer.ml"

  | 6 ->
# 122 "src/lexer.mll"
                ( let lxm = Lexing.lexeme lexbuf in
                    check_reserved lxm )
# 308 "src/lexer.ml"

  | 7 ->
# 126 "src/lexer.mll"
                ( let lxm = Lexing.lexeme lexbuf in
                    IDENT (String.sub lxm 1 (String.length lxm - 2)) )
# 314 "src/lexer.ml"

  | 8 ->
# 130 "src/lexer.mll"
                ( let lxm = Lexing.lexeme lexbuf in
                    STRING (String.sub lxm 1 (String.length lxm - 2)) )
# 320 "src/lexer.ml"

  | 9 ->
# 133 "src/lexer.mll"
                    ( LP )
# 325 "src/lexer.ml"

  | 10 ->
# 134 "src/lexer.mll"
                    ( RP )
# 330 "src/lexer.ml"

  | 11 ->
# 135 "src/lexer.mll"
                    ( LSB )
# 335 "src/lexer.ml"

  | 12 ->
# 136 "src/lexer.mll"
                    ( RSB )
# 340 "src/lexer.ml"

  | 13 ->
# 137 "src/lexer.mll"
                    ( LCB )
# 345 "src/lexer.ml"

  | 14 ->
# 138 "src/lexer.mll"
                    ( RCB )
# 350 "src/lexer.ml"

  | 15 ->
# 140 "src/lexer.mll"
                    ( DOT )
# 355 "src/lexer.ml"

  | 16 ->
# 141 "src/lexer.mll"
                    ( CM )
# 360 "src/lexer.ml"

  | 17 ->
# 142 "src/lexer.mll"
                    ( SC )
# 365 "src/lexer.ml"

  | 18 ->
# 143 "src/lexer.mll"
                    ( CL )
# 370 "src/lexer.ml"

  | 19 ->
# 145 "src/lexer.mll"
                    ( PLUS )
# 375 "src/lexer.ml"

  | 20 ->
# 146 "src/lexer.mll"
                    ( MINUS )
# 380 "src/lexer.ml"

  | 21 ->
# 147 "src/lexer.mll"
                    ( STAR )
# 385 "src/lexer.ml"

  | 22 ->
# 148 "src/lexer.mll"
                    ( SLASH )
# 390 "src/lexer.ml"

  | 23 ->
# 149 "src/lexer.mll"
                    ( EXP )
# 395 "src/lexer.ml"

  | 24 ->
# 151 "src/lexer.mll"
                    ( EQ )
# 400 "src/lexer.ml"

  | 25 ->
# 152 "src/lexer.mll"
                    ( COLEQ )
# 405 "src/lexer.ml"

  | 26 ->
# 154 "src/lexer.mll"
                    ( LT )
# 410 "src/lexer.ml"

  | 27 ->
# 155 "src/lexer.mll"
                    ( GT )
# 415 "src/lexer.ml"

  | 28 ->
# 156 "src/lexer.mll"
                    ( LE )
# 420 "src/lexer.ml"

  | 29 ->
# 157 "src/lexer.mll"
                    ( GE )
# 425 "src/lexer.ml"

  | 30 ->
# 158 "src/lexer.mll"
                    ( EE )
# 430 "src/lexer.ml"

  | 31 ->
# 159 "src/lexer.mll"
                    ( NE )
# 435 "src/lexer.ml"

  | 32 ->
# 161 "src/lexer.mll"
                    ( EOF )
# 440 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

