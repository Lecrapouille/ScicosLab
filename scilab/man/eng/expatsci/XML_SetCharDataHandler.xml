<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MAN SYSTEM "../../manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>

  <TITLE>XML_SetCharDataHandler</TITLE>

  <TYPE>ScicosLab Function</TYPE>

  <DATE>22 September 2009</DATE>

  <SHORT_DESCRIPTION name="XML_SetCharDataHandler">Set function for XML strings handler</SHORT_DESCRIPTION>

  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>XML_SetCharDataHandler(%ptr,'char_hdl')</CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>

  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>%ptr</PARAM_NAME>

        <PARAM_DESCRIPTION>
          <SP> : a Scilab pointer pointing to an Expat object.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
        <PARAM_NAME>'char_hdl'</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP> : a string defining a Scilab function name.</SP>
          <P> The function calling sequence can be : </P>
          <PARAM_INDENT>
             <PARAM_ITEM>
               <PARAM_NAME>[data]=char_hdl(data,txt)</PARAM_NAME>
               <PARAM_DESCRIPTION>
               <SP> </SP>
               </PARAM_DESCRIPTION>
             </PARAM_ITEM>
             <PARAM_ITEM>
               <PARAM_NAME>[]=char_hdl(txt)</PARAM_NAME>
               <PARAM_DESCRIPTION>
               <SP> </SP>
               </PARAM_DESCRIPTION>
             </PARAM_ITEM>
          </PARAM_INDENT>
          <P>with <VERB>data</VERB> the user data and <VERB>txt</VERB> a vector of strings that gives the text enclosed in Xml tags.</P>
          </PARAM_DESCRIPTION>
      </PARAM_ITEM>

    </PARAM_INDENT>
  </PARAM>

  <DESCRIPTION>
  <P>
    This function set the user functions that will be called during the parsing of XML.
    'char_hdl' defines the Scilab function name that will be called for the text inside
    XML tags.
    The XML pointer must be created with XML_ParserCreate.
    The input string must be a valid Scilab function name.
  </P>
  </DESCRIPTION>

  <EXAMPLE><![CDATA[
  txt = mgetl('SCI/man/eng/expatsci/XML_Parse.xml');

  //def start_hndl
  function []=start_handl(el,attr)
    printf("Begin of %s \n",el);
  endfunction

  //def end_hndl
  function []=end_handl(el)
    printf("end of %s \n",el);
  endfunction

  //def char_hndl
  function []=char_handl(txt)
    printf("%s \n",txt)
  endfunction

  %ptr=XML_ParserCreate();

  XML_SetElementHandler(%ptr,'start_handl','end_handl');
  XML_SetCharDataHandler(%ptr,'char_handl');

  XML_Parse(%ptr, txt);

  ]]></EXAMPLE>

  <SEE_ALSO>
    <SEE_ALSO_ITEM>
      <LINK>XML_ParserCreate</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>XML_ParserFree</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>XML_SetUserData</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>XML_SetElementHandler</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>XML_Parse</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>XML_Conv2Latin</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>XML_StopParser</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>XML_ResumeParser</LINK>
    </SEE_ALSO_ITEM>
  </SEE_ALSO>

  <AUTHORS>
    <AUTHORS_ITEM label='METALAU project-team, INRIA'>
    A.Layec
    </AUTHORS_ITEM>
  </AUTHORS>

  <BIBLIO>
   <P> 
   'The Expat XML Parser', Available: http://expat.sourceforge.net/
   </P>
  </BIBLIO>
</MAN>