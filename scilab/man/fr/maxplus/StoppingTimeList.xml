<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?> 
<!DOCTYPE MAN SYSTEM "../../man.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>StoppingTimeList  </TITLE>
  <TYPE>Maxplus Function  </TYPE>
  <DATE>   </DATE>
  <SHORT_DESCRIPTION name="StoppingTimeList"> Optimal Markov Chain Stopping Time Data Bases  </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>%StopTime=tlist([&apos;StopTime&apos;,&apos;Mtrans&apos;,&apos;Cout&apos;,&apos;Einit&apos;,&apos;Eps&apos;,&apos;Efilt&apos;,&apos;Cfilt&apos;,&apos;Popt&apos;,&apos;Copt&apos;],..  </CALLING_SEQUENCE_ITEM>
  <CALLING_SEQUENCE_ITEM>Mtrans,Cout,Einit,Eps,Efilt,Cfilt,Popt,Copt)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>Mtrans :  </PARAM_NAME>
  <PARAM_DESCRIPTION>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <VERBATIM><![CDATA[
tlist(['mat','nbr','y1',y2,..,'ynbr'],nbr,M1,..,Mnbr) 
   ]]></VERBATIM>
  <P>
    Tlist of observed transition mtrices, where  nbr denotes the number of possible observation. All the matrices M1,.., must bes square with the same size nxn which is arbitrary.  The sum of these matrices must be a stochastic matrix (postive entries, column sum is a column of one).
  </P>
  <PARAM_ITEM>
  <PARAM_NAME>Cout  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Matrix of two colums costs of size n. The first column is the stopping cost and the second one is the instantaneous cost.
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Einit  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Row vector of size n rpresenting the initial conditional state law. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Eps  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Integer giving the bit number accepted to approximate the entries of the optimal state filter.  
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Efilt  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Matrix with n column representing the support of the  approximated filter law. The line number m depends of the problem and of the quantification level (Eps).
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Cfilt  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Matrix mx2 giving the average costs on the support of the filter law.
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Popt  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Sparse column vector (of size m) giving the optimal policy on the filter law support. When it takes the value 1 we continue. When it takes the value 0 we stop. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Copt  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    : Colum vector (of size m) giving the optimal cost on the filter support. 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
  </P>
  <P>
     All the data needed and obtained in solving optimal
    stopping time for Markov chains incompletely observed
    is stored in a tlist global variable called %StopTime.
     
    The number of states and possible
    observations are supposed to be finite.
  </P>
  <P>
    The fields Efilt and Cfilt are filled by calling the function
  </P>
  <VERBATIM><![CDATA[
support() 
   ]]></VERBATIM>
  <P>
  </P>
  <P>
    The fields Popt and Copt are filled by the calling to the function
  </P>
  <VERBATIM><![CDATA[
optstop() 
   ]]></VERBATIM>
  <P>
  </P>
  <P>
  </P>
  </DESCRIPTION>
  <EXAMPLE><![CDATA[
// Secretary Problem (4 scretaries)
//
// Definition of Transition Matrices
nbr=2
Obs0=[1 0 0 0;0 0.75 0 0;0 0 0.5 0;0 0 0 0.25]
Obs1=[0 0 0 0;0.25 0 0 0;0.25 0.25 0 0;0.25 0.25 0.25 0]
Mtrans=tlist(['trans','nbr','y1','y2'],nbr,Obs0,Obs1)
//
// Cost definitions
C0=[1;0;0;0]
C1=[-1/10;-1/10;-1/10;-1/10]
C=[C0,C1]
//
// Uniform initial law
E0=[0.25 0.25 0.25 0.25]
//
// 3 bits quantification
Eps=3
//
// The data bases is a global variable
global %StopTime
//
// Data Bases building
%StopTime=tlist(['StopTime','Mtrans','Cout','Einit','Eps','Efilt','MTfilt','Cfilt','Popt','Copt'],..
Mtrans,C,E0,Eps,[],[],[],[],[])
//
// Computation of the support of the filter law
support()
//
// Computation of the optimal stopping time and cost
optstop()

 ]]></EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK>costo</LINK> </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
